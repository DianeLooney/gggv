version: 2.1

orbs:
# codecov: codecov/codecov@1.0.5
  win: circleci/windows@1.0.0

jobs:
  vet:
    docker:
      - image: diane/gggv-base:latest
    environment:
      CGO_CFLAGS: -w
    working_directory: /go/src/github.com/dianelooney/gggv
    steps:
      - checkout
      - run: go get -v -t -d ./...
      - run: go vet -unsafeptr=false $(go list ./... | grep -v /wrappers/) 
  test:
    docker:
      - image: diane/gggv-base:latest
    environment:
      CGO_CFLAGS: -w
    working_directory: /go/src/github.com/dianelooney/gggv
    steps:
      - checkout
      - run: go get -v -t -d ./...
      - run: mkdir /tmp/coverage
      - run: go test -v ./... -coverprofile=/tmp/coverage/c.out
      - run: go tool cover -html=/tmp/coverage/c.out -o /tmp/coverage/c.html
      - store_artifacts:
          path: /tmp/coverage
#     - codecov/upload:
#         file: /tmp/coverage/c.out
  win-test:
    environment:
      PKG_CONFIG_PATH: /tmp/pkg-config
      CGO_LDFLAGS: -L/tmp/ffmpeg-latest-win64-dev/lib/ -lavcodec -lavformat -lavutil -lswscale -lswresample -lavdevice -lavfilter
      CGO_CFLAGS: -I/tmp/ffmpeg-latest-win64-dev/include -w
      LD_LIBRARY_PATH: /tmp/ffmpeg-latest-win64-dev/lib
    executor:
      name: win/vs2019
      shell: bash.ex
    working_directory: /go/src/github.com/dianelooney/gggv
    steps:
      - checkout
      - run: go get -v -t -d ./...
      - run: mkdir /tmp/coverage
      - run: go test -v ./... -coverprofile=/tmp/coverage/c.out
      - run: go tool cover -html=/tmp/coverage/c.out -o /tmp/coverage/c.html
      - store_artifacts:
          path: /tmp/coverage
#     - codecov/upload:
#         file: /tmp/coverage/c.out
  win-build:
    environment:
      PKG_CONFIG_PATH: /tmp/pkg-config
      CGO_LDFLAGS: -L/tmp/ffmpeg-latest-win64-dev/lib/ -lavcodec -lavformat -lavutil -lswscale -lswresample -lavdevice -lavfilter
      CGO_CFLAGS: -I/tmp/ffmpeg-latest-win64-dev/include -w
      LD_LIBRARY_PATH: /tmp/ffmpeg-latest-win64-dev/lib

    executor:
      name: win/vs2019
      shell: bash.exe
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: choco install mingw pkgconfiglite
      - run:
          name: Setup pkg-config stubs
          command: ./build/windows/configure.sh
      - run:
          name: Install MinGW
          command: choco install mingw
      - run:
          name: Download FFMPEG-dev
          command: curl https://ffmpeg.zeranoe.com/builds/win64/dev/ffmpeg-latest-win64-dev.zip > /tmp/ffmpeg-latest-win64-dev.zip
      - run:
          name: Extract FFMPEG-dev
          command: unzip /tmp/ffmpeg-latest-win64-dev.zip -d /tmp/
      - run:
          name: Install go 1.13
          command: choco install golang
      - run:
          name: Build Daemon
          command: go build -o=daemon.exe cmd/daemon/main.go
      - store_artifacts:
          path: daemon.exe
          destination: daemon.exe
  docker-build-gggv-base:
    environment:
      IMAGE_NAME: diane/gggv-base
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t diane/gggv-base:latest -f build/gggv-base/Dockerfile .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  docker-build-gggv:
    environment:
      IMAGE_NAME: diane/gggv
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t diane/gggv:latest -f build/gggv/Dockerfile .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest

workflows:
  version: 2
  base-image-update:
    triggers:
      - schedule:
          cron: "0 0 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - docker-build-gggv-base
  release:
    jobs:
      - vet
      - test
      - win-test:
          requires:
            - vet
            - test
      - win-build:
          requires:
            - vet
            - test
          filters:
          filters:
            branches:
              only: master
            branches:
              only: master
      - docker-build-gggv:
          requires:
            - vet
            - test
          filters:
            branches:
              only: master
